
IPython Notebook
CodeAcademy Course Last Checkpoint: Jun 20 17:35 (autosaved)

    File
    Edit
    View
    Insert
    Cell
    Kernel
    Help

Cell Toolbar:
Simple errors

A common application of a while loop is to check user input to see if it is valid. For example, if you ask the user to enter y or n and they instead enter 7, then you should re-prompt them for input.
Instructions

Fill in the loop condition so the user will be prompted for a choice over and over while choice does not equal 'y' and choice does not equal 'n'.
In [50]:

choice = raw_input('Enjoying the course? (y/n)')


while choice not in ("y","n"):  # Fill in the condition (before the colon)

    choice = raw_input("Sorry, I didn't catch that. Enter again: ")

Enjoying the course? (y/n)y

Break

The break is a one-line statement that means "exit the current loop." An alternate way to make our counting loop exit and stop executing is with the break statement.

First, create a while with a condition that is always true. The simplest way is shown.

Using an if statement, you define the stopping condition. Inside the if, you write break, meaning "exit the loop."

The difference here is that this loop is guaranteed to run at least once.
Instructions

See what the break does? Feel free to mess around with it (but make sure you don't cause an infinite loop)! Click Save & Submit Code when you're ready to continue.
In [7]:

count = 0

while True:

    print count

    count += 1

    if count >= 10:

        break

0
1
2
3
4
5
6
7
8
9

While / else

Something completely different about Python is the while/else construction. while/else is similar to if/else, but there is a difference: the else block will execute anytime the loop condition is evaluated to False. This means that it will execute if the loop is never entered or if the loop exits normally. If the loop exits as the result of a break, the else will not be executed.

In this example, the loop will break if a 5 is generated, and the else will not execute. Otherwise, after 3 numbers are generated, the loop condition will become false and the else will execute.
In [6]:

import random

print "Lucky Numbers! 3 numbers will be generated."

print "If one of them is a '5', you lose!"

count = 0

while count < 3:

    num = random.randint(1, 6)

    print num

    if num == 5:

        print "Sorry, you lose!"

        break

    count += 1

else:

    print "You win!"

Lucky Numbers! 3 numbers will be generated.
If one of them is a '5', you lose!
5
Sorry, you lose!

Your own while / else

Now you should be able to make a game similar to the one in the last exercise.

In this exercise, allow the user to guess what the number is three times.
In [2]:

guess = int(raw_input("Your guess: "))

Your guess: 3

Remember, raw_input turns user input into a string, so we use int() to make it a number again.
Instructions

Use a while loop to let the user keep guessing so long as guesses_left is greater than zero. Ask the user for their guess, just like the second example above. If they guess correctly, print 'You win!' and break. Decrement guesses_left by one. Use an else: case after your while loop to print You lose..
In [4]:

from random import randint

# Generates a number from 1 through 10 inclusive

random_number = randint(1,10)

guesses_left = 3

# Start your game!

while guesses_left > 0:

    guess = raw_input("Guess a number:")

    if int(guess) == random_number:

        print "You win!"

        break

    guesses_left -= 1

else:

    print "You lose"

Guess a number:6
Guess a number:7
Guess a number:2
You lose

For your hobbies

This kind of loop is useful when you want to do something a certain number of times, such as append something to the end of a list.
Instructions

Create a for loop that prompts the user for a hobby 3 times, then appends each one to hobbies.
In [6]:

hobbies = []

# Add your code below!

for i in range(3):

    hobby = raw_input("Give your hobby # %s:" % str(i+1))

    hobbies.append(hobby)

    i += 1

print " and ".join(hobbies)

Give your hobby # 1:books
Give your hobby # 2:study
Give your hobby # 3:video games
books and study and video games

For your A
String manipulation is useful in for loops if you want to modify some content in a string.
In [7]:

word = "Marble"

for char in word:

    print char,

M a r b l e

The example above iterates through each character in word and, in the end, prints out M a r b l e.

The , character after our print statement means that our next print statement keeps printing on the same line.
Instructions

Let's filter out the letter 'A' from our string.

Do the following for each character in the phrase. If char is an 'A' or char is an 'a', print 'X', instead of char. Make sure to include the trailing comma. Otherwise (else:), please print char, with the trailing comma.
In [8]:

phrase = "A bird in the hand..."


# Add your for loop

for char in phrase:

    if char == "A" or char == "a":

        print "X",

    else:

        print char,

        

#Don't delete this print statement!

print

X   b i r d   i n   t h e   h X n d . . .

For your lists

Perhaps the most useful (and most common) use of for loops is to go through a list.

On each iteration, the variable num will be the next value in the list. So, the first time through, it will be 7, the second time it will be 9, then 12, 54, 99, and then the loop will exit when there are no more values in the list.
Instructions

Write a second for loop that goes through the numbers list and prints each element squared, each on its own line.
In [9]:

numbers  = [7, 9, 12, 54, 99]


print "This list contains: "

for num in numbers:

    print num

# Add your loop below!

for i in numbers:

    print i**2

This list contains: 
7
9
12
54
99
49
81
144
2916
9801

Looping over a dictionary

You may be wondering how looping over a dictionary would work. Would you get the key or the value?

The short answer is: you get the key which you can use to get the value.
In [10]:

d = {'x': 9, 'y': 10, 'z': 20}

for key in d:

    if d[key] == 10:

        print "This dictionary has the value 10!"

This dictionary has the value 10!

First, we create a dictionary with strings as the keys and numbers as the values. Then, we iterate through the dictionary, each time storing the key in key. Next, we check if that key's value is equal to 10. Finally, we print This dictionary has the value 10!
Instructions

On line 5, print the key, followed by a space, followed by the value associated with that key.
In [12]:

d = {'a': 'apple', 'b': 'berry', 'c': 'cherry'}

for key in d:

    # Your code here!

    print key + " " + d[key]

a apple
c cherry
b berry

Counting as you go

A weakness of using this for-each style of iteration is that you don't know the index of the thing you're looking at. Generally this isn't an issue, but at times it is useful to know how far into the list you are. Thankfully the built-in enumerate function helps with this.

enumerate works by supplying a corresponding index to each element in the list that you pass it. Each time you go through the loop, index will be one greater, and item will be the next item in the sequence. It's very similar to using a normal for loop with a list, except this gives us an easy way to count how many items we've seen so far.
Instructions

We don't want the user to see things listed from index 0, since this looks unnatural. Instead, the items should appear to start at index 1. Modify the print statement to reflect this behavior. See the Hint for help.

In the for index, item in enumerate(choices): expression index, item is the pair of count, value of each tuple: (0, 'pizza'), (1, 'pasta'), ...

We may easily change the start count/index with help of enumerate(sequence, start=0)

https://www.codecademy.com/forum_questions/5087f2d786a27b02000041a9
In [15]:

choices = ['pizza', 'pasta', 'salad', 'nachos']

for index, item in enumerate(choices, start = 1):

    print index, item

1 pizza
2 pasta
3 salad
4 nachos

Or:
In [16]:

choices = ['pizza', 'pasta', 'salad', 'nachos']

print 'Your choices are:'

for index, item in enumerate(choices):

    print index + 1, item

Your choices are:
1 pizza
2 pasta
3 salad
4 nachos

Multiple lists

It's also common to need to iterate over two lists at once. This is where the built-in zip function comes in handy.

zip will create pairs of elements when passed two lists, and will stop at the end of the shorter list.

zip can handle three or more lists as well!
Instructions

Compare each pair of elements and print the larger of the two.
In [17]:

list_a = [3, 9, 17, 15, 19]

list_b = [2, 4, 8, 10, 30, 40, 50, 60, 70, 80, 90]

for a, b in zip(list_a, list_b):

    # Add your code here!

    print max(a,b)

3
9
17
15
30

For / else

Just like with while, for loops may have an else associated with them.

In this case, the else statement is executed after the for, but only if the for ends normallyâ€”that is, not with a break. This code will break when it hits 'tomato', so the else block won't be executed.
In [18]:

fruits = ['banana', 'apple', 'orange', 'tomato', 'pear', 'grape']

print 'You have...'

for f in fruits:

    if f == 'tomato':

        print 'A tomato is not a fruit!' # (It actually is.)

        break

    print 'A', f

else:

    print 'A fine selection of fruits!'

You have...
A banana
A apple
A orange
A tomato is not a fruit!

Change it up

As mentioned, the else block won't run in this case, since break executes when it hits 'tomato'.
Instructions

Modify the code in the editor such that the for loop's else statement is executed.
In [19]:

fruits = ['banana', 'apple', 'orange', 'tomato', 'pear', 'grape']

print 'You have...'

for f in fruits:

    if f == 'tomato':

        print 'A tomato is not a fruit!' # (It actually is.)

    print 'A', f

else:

    print 'A fine selection of fruits!'

You have...
A banana
A apple
A orange
A tomato is not a fruit!
A tomato
A pear
A grape
A fine selection of fruits!

Create your own

To wrap up this lesson, let's create our own for/else statement from scratch.
Instructions

Build your for/else statement in the editor. Execution of the else branch is optional, but your code should print a string of your choice to the editor regardless.
In [20]:

patients = {"Marie": "anxious", "Jean-Yves": "dead", "Max": "sane", "Christel": "insane"}

for i in patients:

    if patients[i] != "insane":

        print "patient: %s needs no treatment" % i 

    else:

        print "patient: %s needs treatment" % i 

#        break

else:

    print "No more patients"

patient: Christel needs treatment
patient: Max needs no treatment
patient: Jean-Yves needs no treatment
patient: Marie needs no treatment
No more patients

is_even

All right! Let's get started.

Remember how an even number is a number that is divisible by 2?
Instructions

Define a function is_even that will take a number x as input. If x is even, then return True. Otherwise, return False.
In [21]:

def is_even(x):

    if x%2 ==0:

        return True

    else:

        return False

is_int

An integer is just a number without a decimal part (for instance, -17, 0, and 42 are all integers, but 98.6 is not).

For the purpose of this lesson, we'll also say that a number with a decimal part that is all 0s is also an integer, such as 7.0.

This means that, for this lesson, you can't just test the input to see if it's of type int.

If the difference between a number and that same number rounded down is greater than zero, what does that say about that particular number?
Instructions

Define a function is_int that takes a number x as an input. Have it return True if the number is an integer (as defined above) and False otherwise. For example:
In [22]:

is_int(7.0)   # True

is_int(7.5)   # False

is_int(-1)    # True 

---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-22-9bc65d7763f4> in <module>()
----> 1 is_int(7.0)   # True
      2 is_int(7.5)   # False
      3 is_int(-1)    # True

NameError: name 'is_int' is not defined

In [23]:

import math

def is_int(x):

    if x - math.floor(x) > 0:

        return False

    else:

        return True

In [24]:

is_int(7.5)

Out[24]:

False

In [33]:

len(n)

Out[33]:

2

digit_sum

Awesome! Now let's try something a little trickier. Try summing the digits of a number.
Instructions

Write a function called digit_sum that takes a positive integer n as input and returns the sum of all that number's digits.

For example: digit_sum(1234) should return 10 which is 1 + 2 + 3 + 4.

(Assume that the number you are given will always be positive.)

Check the hint if you need help!
In [34]:

def digit_sum(n):

    a = []

    b = str(n)

    for x in b:

        c = int(x)

        a.append(c)

    x = sum(a)

    return x

In [35]:

print digit_sum(123)

6

factorial

All right! Now we're cooking. Let's try a factorial problem.

To calculate the factorial of a non-negative integer x, just multiply all the integers from 1 through x. For example:

factorial(4) would equal 4 3 2 1, which is 24. factorial(1) would equal 1. factorial(3) would equal 3 2 * 1, which is 6.
Instructions

Define a function factorial that takes an integer x as input.

Calculate and return the factorial of that number.
In [44]:

def factorial(n):

    fact = 1

    i = 2

    if n > 1:

        while i <= n:

            fact = fact*i

            i += 1

            if i>n:

                break

        return fact

    else:

        return fact

 

print factorial(3)

6

is_prime

A prime number is a positive integer greater than 1 that has no positive divisors other than 1 and itself. (Boy, that's a mouthful.)

In other words, if you want to test if a number in a variable x is prime, then no other number should go into x evenly besides 1 and x. So 2 and 5 and 11 are all prime, but 4 and 18 and 21 are not.

If there is a number between 1 and x that goes in evenly, then x is not prime.
Instructions

Define a function called is_prime that takes a number x as input. For each number n from 2 to x - 1, test if x is evenly divisible by n. If it is, return False. If none of them are, then return True.
In [45]:

def is_prime(x):

    if x < 2:

        return False

    else:

        if x == 2:

            return True

        else:

            for i in range(2, x):

                if x % i == 0:

                    return False

            return True

x = int(raw_input("enter a prime number"))

print is_prime(x)

enter a prime number5
True

Reverse

Great work so far! Let's practice writing some functions that work with strings.
Instructions

Define a function called reverse that takes a string textand returns that string in reverse.

For example: reverse("abcd") should return "dcba".

You may not use reversed or [::-1] to help you with this. You may get a string containing special characters (for example, !, @, or #)
In [46]:

def reverse(text):

    list = []

    count = 1

    for i in range(0,len(text)):

        list.append(text[len(text)-count])

        count +=1

        

    list = "".join(list)

    return list

a = raw_input("Enter a text: ")

print reverse(a)

Enter a text: Marie
eiraM

anti_vowel

Nice work. Next up: vowels!
Instructions

Define a function called anti_vowel that takes one string, text, as input and returns the text with all of the vowels removed.

For example: anti_vowel("Hey You!") should return "Hy Y!".

Don't count Y as a vowel. Make sure to remove lowercase and uppercase vowels.
In [47]:

vowel = ["a","e","i","o","u","A","E","I", "O", "U"]

def anti_vowel(text): 

    lst = [] 

    for i in text:

        lst.append(i)

        for j in vowel:

            if j == i:

                lst.remove(i)

                          

    return str("".join(lst))

    

print anti_vowel("Marie")

Mr

scrabble_score

Scrabble is a game where players get points by spelling words. Words are scored by adding together the point values of each individual letter (we'll leave out the double and triple letter and word scores for now).

To the right is a dictionary containing all of the letters in the alphabet with their corresponding Scrabble point values.

For example: the word "Helix" would score 15 points due to the sum of the letters: 4 + 1 + 1 + 1 + 8.
Instructions

Define a function scrabble_score that takes a string word as input and returns the equivalent scrabble score for that word.

Assume your input is only one word containing no spaces or punctuation. As mentioned, no need to worry about score multipliers! Your function should work even if the letters you get are uppercase, lowercase, or a mix. Assume that you're only given non-empty strings.
In [55]:

score = {"a": 1, "c": 3, "b": 3, "e": 1, "d": 2, "g": 2, 

         "f": 4, "i": 1, "h": 4, "k": 5, "j": 8, "m": 3, 

         "l": 1, "o": 1, "n": 1, "q": 10, "p": 3, "s": 1, 

         "r": 1, "u": 1, "t": 1, "w": 4, "v": 4, "y": 4, 

         "x": 8, "z": 10}


def scrabble_score(text):

    Score = 0

    lst = []

    for j in text:

        lst.append(j)

        for i in score:

            if j == i or j.lower() == i:

                Score += int(score[i])

    return Score

word = raw_input("Enter a word: ")

print scrabble_score(word)

Enter a word: DuNe
5

Other method:
In [2]:

score = {"a": 1, "c": 3, "b": 3, "e": 1, "d": 2, "g": 2, 

         "f": 4, "i": 1, "h": 4, "k": 5, "j": 8, "m": 3, 

         "l": 1, "o": 1, "n": 1, "q": 10, "p": 3, "s": 1, 

         "r": 1, "u": 1, "t": 1, "w": 4, "v": 4, "y": 4, 

         "x": 8, "z": 10}


def scrabble_score(text):

    return sum(score[i] for i in text.lower())

word = raw_input("Enter your word: ")

print scrabble_score(word)

Enter your word: Tristesse
9

censor

Instructions

Write a function called censor that takes two strings, text and word, as input. It should return the text with the word you chose replaced with asterisks.

For example:

censor("this hack is wack hack", "hack") should return

"this is wack " Assume your input strings won't contain punctuation or upper case letters. The number of asterisks you put should correspond to the number of letters in the censored word.
In [1]:

def censor(text,word):

    return text.replace(word, "*" * len(word)) 

print censor ("hey hey hey", "hey")

*** *** ***

Other method
In [3]:

def censor(text,word):

    t = text.split()

    n = []

    for i in t:

        if i == word:

            n.append("*"*len(word))

        else:

            n.append(i)

    return " ".join(n)

print censor("Hey Bastard", "Bastard")

Hey *******

Count

Great work so far. Let's finish up by practicing with a few functions that take lists as arguments.
Instructions

Define a function called count that has two arguments called sequence and item. Return the number of times the item occurs in the list. For example: count([1,2,1,1], 1) should return 3 (because 1 appears 3 times in the list).

There is a list method in Python that you can use for this, but you should do it the long way for practice. Your function should return an integer. The item you input may be an integer, string, float, or even another list! Be careful not to use list as a variable name in your codeâ€”it's a reserved word in Python!
In [4]:

def count(sequence, item):

    sequence = list(sequence)

    count = 0

    for i in sequence:

        if i == item:

            count += 1

    return count

print count([1,2,1,1], 1)

3
